'.source.vex':
  'do ... while':
    'prefix': 'do'
    'body': 'do {\n\t${0:/* code */}\n} while(${1:/* condition */});'
  'for ...':
    'prefix': 'for'
    'body': 'for(int ${2:i} = 0; $2 < ${1:count}; $2++)\n{\n\t${0:/* code */}\n}'
  'if ... else':
    'prefix': 'ife'
    'body': 'if(${1:/* condition */})\n{\n\t${2:/* code */}\n}\nelse\n{\n\t${0:/* code */}\n}'
  'if ...':
    'prefix': 'if'
    'body': 'if(${1:/* condition */})\n{\n\t${0:/* code */}\n}'
  'main ...':
    'prefix': 'main'
    'body': 'void main()\n{\n\t${0:/* code */}\n}'
  'method ...':
    'prefix': 'me'
    'body': '${1:void} ${2:method}()\n{\n\t${0:/* code */}\n}'
  'struct':
    'prefix': 'struct'
    'body': 'struct ${1:/* name */} \n{\n\t${0:/* data */}\n};'
  'switch ...':
    'prefix': 'switch'
    'body': 'switch(${1:/* statement */})\n{\n\tcase ${0:/* expression */}:\n\tdefault:\n}'
  'while ...':
    'prefix': 'while'
    'body': 'while(${1:/* condition */})\n{\n\t${0:/* code */}\n}'
  'gather ...':
    'prefix': 'gather'
    'body': 'gather(${1:origin}, ${2:direction} ${3:/*, keyword/value pairs */})\n{\n\t${0:/* Statements for rays that hit other surfaces */}\n}'
  'gather ... else':
    'prefix': 'gathere'
    'body': 'gather(${1:origin}, ${2:direction} ${3:/*, keyword/value pairs */})\n{\n\t${4:/* Statements for rays that hit other surfaces */}\n}\nelse\n{\n\t${0:/* Statements for rays which didn\'t hit any surface */}\n}'
  'illuminance ...':
    'prefix': 'illuminance'
    'body': 'illuminance(${1:P}, ${2:N}, ${3:M_PI/2} ${4:/*, [light_typemask], [lightmask] */})\n{\n\t${0:// Here, Cl and L will be set to the value/direction for the\n\t// current light source.\n\n\t// To force the shadow shader to be called, use:\n\t// shadow(Cl);}\n}'
  'foreach ...':
    'prefix': 'foreach'
    'body': 'foreach(${1:value}; ${2:array})\n{\n\t${0:/* code */}\n}'
  'foreach ... enumerate':
    'prefix': 'foreache'
    'body': 'foreach(int ${1:i}; ${2:type} ${3:value}; ${4:array})\n{\n\t${0:/* code */}\n}'
  'printf ...':
    'prefix': 'pr'
    'body': 'printf("${1:var}= %g",$1)\n'
